// Normalizes a binary node.
//
// Variable root must be pre-defined.  The successors must normalize to data
// terms (i.e., ones with exactly one constructor), or TAG must be defined so
// that the tag is never greater than zero.

// The NORMALIZE macro may be defined to control how to perform normalization.
#ifndef NORMALIZE
#define NORMALIZE(arg) arg->vptr->H(arg)
#endif

// The TAG macro may be defined to control how the tag of the inductive node is
// obtained.
#ifndef TAG
#define TAG(arg) arg->tag
#endif

  static void * table_lhs[] =
      { &&t_fail, &&t_fwd_lhs, &&t_choice_lhs, &&t_oper_lhs, &&t_ctor_lhs };
  static void * table_rhs[] =
      { &&t_fail, &&t_fwd_rhs, &&t_choice_rhs, &&t_oper_rhs, &&t_ctor_rhs };
  node * lhs = SUCC_0(root);
  node * rhs = SUCC_1(root);
  node * lhs_choice, * rhs_choice;
  goto* (&table_lhs[4])[TAG(lhs)];
t_fail:
  return CyPrelude_failed(root);
t_fwd_lhs:
  lhs = reinterpret_cast<node *>(lhs->slot0);
  goto* (&table_lhs[4])[TAG(lhs)];
t_fwd_rhs:
  rhs = reinterpret_cast<node *>(rhs->slot0);
  goto* (&table_rhs[4])[TAG(rhs)];
t_choice_lhs:
  // FIXME: need to alloc with the correct function.
  lhs_choice = reinterpret_cast<node*>(malloc(sizeof(node)));
  rhs_choice = reinterpret_cast<node*>(malloc(sizeof(node)));
  lhs_choice->vptr = root->vptr;
  lhs_choice->tag = root->tag;
  lhs_choice->slot0 = lhs->slot0;
  lhs_choice->slot1 = rhs;
  rhs_choice->vptr = root->vptr;
  rhs_choice->tag = root->tag;
  rhs_choice->slot0 = lhs->slot1;
  rhs_choice->slot1 = rhs;
  root->vptr = &CyVt_Choice;
  root->tag = CHOICE;
  root->aux = lhs->aux; // copy choice id
  root->slot0 = lhs_choice;
  root->slot1 = rhs_choice;
  return;
t_choice_rhs:
  // FIXME: need to alloc with the correct function.
  lhs_choice = reinterpret_cast<node*>(malloc(sizeof(node)));
  rhs_choice = reinterpret_cast<node*>(malloc(sizeof(node)));
  lhs_choice->vptr = root->vptr;
  lhs_choice->tag = root->tag;
  lhs_choice->slot0 = lhs;
  lhs_choice->slot1 = rhs->slot0;
  rhs_choice->vptr = root->vptr;
  rhs_choice->tag = root->tag;
  rhs_choice->slot0 = lhs;
  rhs_choice->slot1 = rhs->slot1;
  root->vptr = &CyVt_Choice;
  root->tag = CHOICE;
  root->aux = rhs->aux; // copy choice id
  root->slot0 = lhs_choice;
  root->slot1 = rhs_choice;
  return;
t_oper_lhs:
  NORMALIZE(lhs);
  goto* (&table_lhs[4])[TAG(lhs)];
t_oper_rhs:
  NORMALIZE(rhs);
  goto* (&table_rhs[4])[TAG(rhs)];
t_ctor_lhs:
  goto* (&table_rhs[4])[TAG(rhs)];
t_ctor_rhs:
#undef NORMALIZE
#undef TAG
